#!/usr/bin/env python
"""
   pygarmin

   This is a console user application for communicating with Garmin
   GPS receivers.

   This is released under the Gnu General Public Licence. A copy of
   this can be found at http://www.opensource.org/licenses/gpl-license.html

   For the latest information about PyGarmin, please see
   http://pygarmin.sourceforge.net/

   (c) 2004      Gerrit Sere
   (c) 2000-2003 James A. H. Skillen <jahs@jahs.net>
   (c) 2001      Raymond Penners <raymond@dotsphinx.com>

"""

import dev_garmin, getopt, os, string, sys

class Arguments(list):

    def __init__(self, config={}, usage='', description='', example=''):
        self.config = config
        if not self.config.has_key('h'):
            self.config['h'] = ('help', '', 'This page')
        self.appname = os.path.basename(sys.argv[0])
        self.usage = usage % self.appname
        self.description = description
        self.example = example % self.appname
        self.options = {}
        self.maxlength = 0

        shortopts = []
        longopts = []
        for k in self.config.keys():
            option, value, desc = self.config[k]
            shortopts.append(k)
            if value:
                shortopts.append(':')
                longopts.append(option + '=')
            else:
                longopts.append(option)
            n = len(option) + len(value)
            if n > self.maxlength:
                self.maxlength = n

        try:
            parsed, leftover = getopt.getopt(sys.argv[1:], ''.join(shortopts),
                                             longopts)
        except:
            print '%s: %s' % (sys.argv[0], sys.exc_info()[1])
            sys.exit(1)

        for option, value in parsed:
            if option.startswith('--'):
                option = option[2:]
            else:
                option = self.config[option[1:]][0]
            self.options[option] = value
        self.extend(leftover)

    def help(self):
        print self.usage
        print self.description
        print self.example
        seq = self.config.keys()
        seq.sort()
        for k in seq:
            option, value, desc = self.config[k]
            n = len(option) + len(value)
            if value:
                print '  -%s, --%s=%s%s%s' % (k, option, value,
                                              (self.maxlength - n + 1) * ' ',
                                              desc)
            else:
                print '  -%s, --%s%s%s' % (k, option,
                                           (self.maxlength - n + 2) * ' ',
                                           desc)

class Pygarmin(object):

    def __init__(self):
        self.args = Arguments(
{'d' : ('debug', 'LEVEL', 'Set debug level, 0-6'),
},
'Usage: %s [OPTIONS] [COMMAND] ...',
"""
Communicate with a Garmin GPS connected to DEVICE, where COMMAND is one of:
info         Show product information
protocols    Show product communication protocols
waypoints    Download waypoints from the GPS
routes       Download routes from the GPS
tracks       Download tracks from the GPS
The default command is to display the product information.
""",
'Example: %s waypoints')

        if self.args.options.has_key('help'):
            self.args.help()
            sys.exit(0)

        if len(self.args) == 0:
            self.args.help()
            sys.exit(1)

        if self.args.options.has_key('debug'):
            garmin.debug = int(self.args.options['debug'])

    def run(self):

        try:
            self.device()
        except IOError:
            sys.stderr.write(sys.exc_info()[1] + '\n')
            sys.exit(1)

        if len(self.args) == 1:
            self.info()
            sys.exit(0)

        for cmd in self.args:
            if cmd in ('info', 'protocols', 'waypoints', 'routes', 'tracks'):
                self.__getattribute__(cmd)()

    def device(self):

        if os.name == 'nt':
            #0 is com1, 1 is com2 etc
            serialDevice =  0
        else:
            serialDevice =  "/dev/ttyS0"

        if sys.platform[:-1] == "freebsd":
            serialDevice =  "/dev/cuaa0" # For FreeBsd

        phys = garmin.SerialLink(serialDevice)

        self.gps = garmin.Garmin(phys)

### commands

    def info(self):
        print '*** Product Info ***'
        print string.join(self.gps.prod_descs, '\n')
        print 'GPS Product ID: %i' % self.gps.prod_id
        print 'Software version: %2.2f' % self.gps.soft_ver
        print

    def protocols(self):
        print '*** Product Protocols ***'

        for i in range(len(self.gps.protocols)):
            p = self.gps.protocols[i]

            if  p[0] == 'D':
                print p,
            else:
                if i == 0:
                    print p,
                else:
                    print
                    print p,

        print

        # print unknown protocols

        if len(self.gps.protocols_unknown):
            print
            print "Product protocols who are not supported yet:"
            print "--------------------------------------------"

            for i in range(len(self.gps.protocols_unknown)):
                p = self.gps.protocols_unknown[i]

                if  p[0] == 'D':
                    print p,
                else:
                    if i == 0:
                        print p,
                    else:
                        print
                        print p,

            print
            print

    def waypoints(self):

        waypoints = self.gps.getWaypoints()

        print "Waypoints :"
        print "-----------"

        for x in waypoints:
            print x

    def routes(self):

        routes = self.gps.getRoutes()

        print "Routes"
        print "------"

        for route in routes:
            print
            print "Route name :", route[0]

            for point in route[1:]:

                # Ok, Bad way to remove D210_Rte_Link_Type entrys

                if len(point) > 23:
                    print "   ",point

    def tracks(self):

        print "Tracks"
        print "------"

        tracks = self.gps.getTracks()

        for track in tracks:

            # Check for multiple tracks

            if type(track) == list:
                print
                print "Track name :",track[0]

                for point in track[1:]:
                    print "   ",point
            else:
                print track


"""
        def waypoints(self):
       fmtmap = {'xml-product': self.waypointsxmlproduct,
                  'xml-abstract': self.waypointsxmlabstract,
                  'pygarmin': self.waypointspygarmin}
        if self.args.options.has_key('format'):
            fmt = self.args.options['format']
            if fmt in fmtmap.keys():
                fmtmap[fmt]()
            else:
                sys.stderr.write("Unknown format: '" + fmt + "'\n")
                sys.exit(1) # XXX use exception
        else:
            self.waypointspygarmin()

        def routes(self):
        print '*** Downloaded Routes ***'
        rs = self.gps.getRoutes(print_)
        print

        def tracks(self):
        print '*** Downloaded Tracks ***'
        ts = self.gps.getTracks(print_)
        print

###

        def waypointspygarmin(self):
        print '*** Downloaded Waypoints ***'
        ws = self.gps.getWaypoints(print_)
        print

        def waypointsxmlproduct(self):
        x = xmlwriter.XmlWriter()
        x.tag('gps', 0, {'class': 'garmin',
                         'id' : self.gps.prod_id,
                         'info': string.join(self.gps.prod_descs),
                         'version': self.gps.soft_ver})
        x.tag('waypoints')
        def cb(w):
            wclass = string.split(str(w.__class__), '.')[-1]
            wname = w.ident
            x.tag('waypoint', 0,
                  { 'class': wclass,
                    'name': wname
                    })
            x.tag('coordinates', 1,
                  { 'latitude' : w.slat,
                    'longitude' : w.slon,
                    'format' : 'semicircle' })
            for attr in w.parts:
               val = eval('w.'+attr)
               if len(str(val)) > 0:
                   x.tag('attribute', 1, { 'name': attr, 'value': val})
            x.tagClose()
        self.gps.getWaypoints(cb)
        x.tagClose()
        x.tagClose()

        def waypointsxmlabstract(self):
        x = xmlwriter.XmlWriter()
        x.tag('gps', 0, {'class': 'abstract'})
        x.tag('waypoints')
        def cb(w):
            wname = w.ident
            x.tag('waypoint', 0, { 'name': wname })
            x.tag('coordinates', 1,
                  { 'latitude' : garmin.degrees(w.slat),
                    'longitude' : garmin.degrees(w.slon)})
            x.tagClose()
        self.gps.getWaypoints(cb)
        x.tagClose()
        x.tagClose()


def print_(x):
    print x
"""

def main():
    app = Pygarmin()
    app.run()

if __name__ == '__main__':
    main()
