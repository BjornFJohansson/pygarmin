#!/usr/bin/env python
"""
   gnome-pygarmin

   This is a GNOME user application for communicating with Garmin
   GPS receivers.

   This is released under the Gnu General Public Licence. A copy of
   this can be found at http://www.opensource.org/licenses/gpl-license.html

   For the latest information about PyGarmin, please see
   http://pygarmin.sourceforge.net/

   (c) 2000 James A. H. Skillen <jahs@skillen.org.uk>
   
"""

import sys, garmin, libglade
from gtk import *
from gnome.ui import *
from gnome import config

class GnomePygarmin:
    def __init__(self):
        self.widgets = libglade.GladeXML("gnome-pygarmin.glade",
                                         "gnome-pygarmin")
        signals = {"on_wpt_upload_clicked"     : self.waypoints_upload,
                   "on_wpt_download_clicked"   : self.waypoints_download,
                   "on_exit1_activate"         : self.exit,
                   "on_gnome-pygarmin_destroy" : self.exit,
                   "on_about1_activate"        : self.about,
                   "on_preferences1_activate"  : self.prefs,
                   "on_toolbar-open_clicked"   : self.open,
                   "on_toolbar-save_clicked"   : self.save,
                   "on_open1_activate"         : self.open,
                   "on_save1_activate"         : self.save,
                   "on_save_as1_activate"      : self.save_as,
                   "on_cut1_activate"          : self.cut,
                   "on_copy1_activate"         : self.copy,
                   "on_paste1_activate"        : self.paste,
                   "on_clear1_activate"        : self.clear,
                   "on_properties1_activate"   : self.properties}

        self.widgets.signal_autoconnect(signals)

        self.gps = None
        device = config.get_string("/gnome-pygarmin/Preferences/serial_device")
        self.init_gps(device)

    def init_gps(self, device):
        if device == None:
            self.prefs(None)
            GnomeErrorDialog("Please enter the serial device to which your GPS is connected.",
                             self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)
        else:
            try:
                phys = garmin.UnixSerialLink(device)
                self.gps = garmin.Garmin(phys)
            except:
                msg = str(sys.exc_info()[1])
                if msg:
                    self.prefs(None)
                    GnomeErrorDialog(str(sys.exc_info()[1]),
                                     self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def waypoints_upload(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def waypoints_download(self, widget):
        if not self.gps:
            self.init_gps()
            return
        wpts = self.gps.getWaypoints()
        wpt_list = self.widgets.get_widget("wpt_list")
        wpt_list.clear()

        for w in wpts:
            wpt_list.append((w.ident,
                             str(garmin.degrees(w.slat)),
                             str(garmin.degrees(w.slon))))

    def exit(self, widget):
        config.sync()
        mainquit()

    def prefs(self, widget):
        Preferences(self)

    def about(self, widget):
        libglade.GladeXML("gnome-pygarmin.glade",
                          "about")

    def open(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)
        
    def save(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def save_as(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def cut(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def copy(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def paste(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def clear(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

    def properties(self, widget):
        GnomeErrorDialog("Not yet implemented!",
                         self.widgets.get_widget("gnome-pygarmin")).set_modal(TRUE)

class Preferences:
    def __init__(self, pygarmin):
        self.pygarmin = pygarmin
        self.widgets = libglade.GladeXML("gnome-pygarmin.glade",
                                         "preferences")
        signals = {"on_prefs-ok_clicked" : self.ok,
                   "on_prefs-apply_clicked" : self.apply,
                   "on_prefs-cancel_clicked" : self.cancel}
        self.widgets.signal_autoconnect(signals)

        text_entry = self.widgets.get_widget("device")
        device = config.get_string("/gnome-pygarmin/Preferences/serial_device")
        if device == None:
            device = ""
        text_entry.set_text(device)

        self.widgets.get_widget("preferences").set_modal(TRUE)

    def ok(self, widget):
        text_entry = self.widgets.get_widget("device")
        device = text_entry.get_text()
        self.pygarmin.init_gps(device)
        config.set_string("/gnome-pygarmin/Preferences/serial_device", device)
        self.cancel(None)

    def apply(self, widget):
        text_entry = self.widgets.get_widget("device")
        device = text_entry.get_text()
        self.pygarmin.init_gps(device)
        self.cancel(None)

    def cancel(self, widget):
        preferences = self.widgets.get_widget("preferences")
        preferences.close()

def main(argv):
    app = GnomePygarmin()
    mainloop()
    del app
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

